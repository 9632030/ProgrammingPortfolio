{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\margl1440\margr1440\vieww12980\viewh11620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1.1 Linux, and coax cable\
1.2 debugs your code\
1.3 certain lines of code\
1.4 to trace execution\
1.5 number = number\
1.6 number = 1/0\
      println(number)\
1.7 1 + 2 = 11\
1.8 Machine code\
1.9 
\f1 \expnd0\expndtw0\kerning0
what a bit and a byte is and how it relates to memory storage\
	a bit and a byte is the size of a computer file\

\f0 \
2.1 \
2.2 operators are things like +, -, /, *, etc. and operands are the answer to an operator\
2.3      def setup():\
	def draw():\kerning1\expnd0\expndtw0 \
2.4 to plan all the classes that are necessary to make the program functional and what those classes will be doing/what methods will be used\
2.5 
\f2\fs26 \cf2 \expnd0\expndtw0\kerning0
Celsius = int(raw_input("Enter a temperature in Celsius: "))\
\pard\pardeftab720\sl360\partightenfactor0
\cf2       Fahrenheit = 9/5 * Celsius + 32\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 2.6 good: calcArea var1 bad: VAR1 Calcarea\
2.7 #comment, #* comment \
		        comment *#\
2.8 Demonstrate how to use white space properly\
	white space needs to be used properly in order to create a balance in the design of the application\
\
3.1 boolean = a\
	a = false\
3.2 name = int(raw_input(\'93Enter Name: \'93))\
3.3 thing = int(raw_input(\'93Thing\'94))\
3.4 + - * / % ** // != > < <= >= = += *= /= %= **= //=\
3.5\
3.6 Communicate clearly with output values stored in identifiers\
\
4.1 and or not etc.\
4.2 != > < <= >= = += *= /= %= **= //=\
4.3 if a = false || a = true:\
4.4 elif person = alive & person = good\
4.5 def numbers_to_strings(argument):\
	switcher = \{\
		0: \'93zero\'94,\
		1: \'93one\'94,\
		2: \'93two\'94,\
	\}\
	return switcher.get(argument, \'93nothing\'94)\
\
4.6 for number in range(100);\
	print(number)\
4.7 while !count = 100:\
	count += 1\
	else:\
		println(\'93nice\'94)\
4.8\
4.9\
4.10}